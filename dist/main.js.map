{"version":3,"file":"main.js","mappings":"qDACIA,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaE,QAGrB,IAAIC,EAASN,EAAyBE,GAAY,CAGjDG,QAAS,CAAC,GAOX,OAHAE,EAAoBL,GAAUI,EAAQA,EAAOD,QAASJ,GAG/CK,EAAOD,OACf,E,kBCtBO,MAAMG,EAAgB,CAACC,EAASC,KACnCC,OAAOC,KAAKF,GAAYG,SAAQC,IAC5BL,EAAQM,aAAaD,EAAKJ,EAAWI,GAArC,GADJ,EAKSE,EAAe,6BCHb,MAAMC,EACjBC,YAAYC,EAAIC,EAAQC,EAAWC,GAC/BC,KAAKJ,GAAM,QAAOA,IAClBI,KAAKC,YAAc,GACnBD,KAAKE,UAAW,EAChBF,KAAKG,aAAe,GACpBH,KAAKF,UAAYA,EACjBE,KAAKD,QAAUA,EACfC,KAAKH,OAASA,EACdG,KAAKI,SAAW,EAChBJ,KAAKK,cAAcL,KAAKF,UAAWE,KAAKD,SACxCC,KAAKM,eACLN,KAAKO,KAAOC,SAASC,gBAAgBhB,EAAc,QACnDO,KAAKU,KAAOF,SAASC,gBAAgBhB,EAAc,KACnDO,KAAKW,OAASH,SAASC,gBAAgBhB,EAAc,UACrDR,EAAce,KAAKW,OAAQ,CACvB,GAAO,aAAYX,KAAKJ,KACxB,YAAeI,KAAKC,YACpB,aAAgBD,KAAKG,aACrB,KAAQ,IACR,KAAQ,IACR,OAAU,OACV,YAAe,gBAGnBH,KAAKY,KAAOJ,SAASC,gBAAgBhB,EAAc,QACnDR,EAAce,KAAKY,KAAM,CACrB,GAAO,GAAEZ,KAAKF,UAAU,KACxB,GAAO,GAAEE,KAAKF,UAAU,KACxB,GAAO,GAAEE,KAAKD,QAAQ,KACtB,GAAO,GAAEC,KAAKD,QAAQ,KACtB,aAAe,kBAAiBC,KAAKJ,MACrC,GAAO,GAAEI,KAAKJ,OAElBI,KAAKa,KAAOL,SAASC,gBAAgBhB,EAAc,QACnDR,EAAce,KAAKa,KAAM,CACrB,EAAK,wBAGTb,KAAKc,KAAON,SAASC,gBAAgBhB,EAAc,QACnDR,EAAce,KAAKc,KAAM,CACrB,EAAKd,KAAKI,SAAS,GACnB,EAAKJ,KAAKI,SAAS,GACnB,eC3CgB,ID8CpBJ,KAAKe,OAASP,SAASC,gBAAgBhB,EAAc,UACrDR,EAAce,KAAKe,OAAQ,CACvB,GAAMf,KAAKI,SAAS,GACpB,GAAMJ,KAAKI,SAAS,GACpB,EAAKY,EACL,KAAQ,UAGZhB,KAAKY,KAAKK,UAAUC,IAAI,cACxBlB,KAAKc,KAAKG,UAAUC,IAAI,eACxBlB,KAAKU,KAAKO,UAAUC,IAAI,iBACxBlB,KAAKc,KAAKK,YAAcnB,KAAKH,OAE7BG,KAAKU,KAAKU,YAAYpB,KAAKO,MAC3BP,KAAKU,KAAKU,YAAYpB,KAAKY,MAC3BZ,KAAKO,KAAKa,YAAYpB,KAAKW,QAC3BX,KAAKW,OAAOS,YAAYpB,KAAKa,MAC7Bb,KAAKU,KAAKU,YAAYpB,KAAKe,QAC3Bf,KAAKU,KAAKU,YAAYpB,KAAKc,KAC9B,CAEDT,cAAcgB,EAAOC,GACjB,MAAOC,EAAIC,GAAMH,GACVI,EAAIC,GAAMJ,EAEXK,EAAcC,KAAKC,MAAMJ,EAAIF,IAAK,GAAKG,EAAGF,IAAK,GAC/CM,EAAaH,EC3EL,GD4ERI,EAAWJ,EAAc,GACzBK,EAAOP,EAAKF,EACZU,EAAOP,EAAKF,EAElBxB,KAAKF,UAAY,CAACyB,EAAMS,EAAOF,EAAaN,EAAMS,EAAOH,GACzD9B,KAAKD,QAAU,CAAC0B,EAAMO,EAAOD,EAAWL,EAAMO,EAAOF,GAErD/B,KAAKkC,iBAAmB,CAACT,EAAMO,EAAOF,EAAaJ,EAAMO,EAAOH,GAChE9B,KAAKmC,eAAiB,CAACZ,EAAMS,EAAOD,EAAWP,EAAMS,EAAOF,EAC/D,CAEDzB,eACI,MAAOiB,EAAIC,GAAMxB,KAAKF,WACf2B,EAAIC,GAAM1B,KAAKD,QAEtBC,KAAKI,SAAW,EAAEmB,EAAKE,GAAI,GAAID,EAAGE,GAAI,EACzC,CAEDU,eACI,OAAOpC,KAAKU,IACf,CAED2B,gBAAgBC,GACZtC,KAAKuC,cACLvC,KAAKc,KAAKG,UAAUC,IAAI,UACxBlB,KAAKe,OAAOE,UAAUC,IAAI,UAE1BoB,EAAKE,aAAY,EACpB,CAEDC,gBAAgBH,GACZtC,KAAK0C,YACL1C,KAAKY,KAAKK,UAAU0B,OAAO,UAC3B3C,KAAKc,KAAKG,UAAU0B,OAAO,UAC3B3C,KAAKe,OAAOE,UAAU0B,OAAO,UAE7BL,EAAKE,aAAY,GACjBF,EAAKM,mBACR,CAaDC,gBACI7C,KAAKY,KAAKK,UAAU0B,OAAO,UAC3B3C,KAAKc,KAAKG,UAAUC,IAAI,UACxBlB,KAAKe,OAAOE,UAAUC,IAAI,SAC7B,CAED4B,gBACI9C,KAAKY,KAAKK,UAAUC,IAAI,UACxBlB,KAAKc,KAAKG,UAAUC,IAAI,UACxBlB,KAAKe,OAAOE,UAAUC,IAAI,SAC7B,CAED6B,QACI,OAAOC,MAAMpD,GAAGqD,MAAM,EACzB,CAyBDP,YACIzD,EAAce,KAAKY,KAAM,CACrB,GAAO,GAAEZ,KAAKkC,iBAAiB,KAC/B,GAAO,GAAElC,KAAKkC,iBAAiB,KAC/B,GAAO,GAAElC,KAAKmC,eAAe,KAC7B,GAAO,GAAEnC,KAAKmC,eAAe,MAEpC,CAEDI,cACItD,EAAce,KAAKY,KAAM,CACrB,GAAO,GAAEZ,KAAKF,UAAU,KACxB,GAAO,GAAEE,KAAKF,UAAU,KACxB,GAAO,GAAEE,KAAKD,QAAQ,KACtB,GAAO,GAAEC,KAAKD,QAAQ,MAE7B,CAEDmD,UAAUC,GACNnD,KAAKE,SAAWiD,CACnB,EE1LU,MAAMC,EACjBzD,cAEIK,KAAKqD,SAAW7C,SAAS8C,cAAc,OACvCtD,KAAKqD,SAASpC,UAAUC,IAAI,aAE5B,MAAMqC,EAAkB/C,SAAS8C,cAAc,KAC/CC,EAAgBtC,UAAUC,IAAI,WAAY,cAAe,SACzDlB,KAAKqD,SAASjC,YAAYmC,GAE1B,MAAMC,EAAqBhD,SAAS8C,cAAc,KAClDE,EAAmBvC,UAAUC,IAAI,WAAY,gBAAiB,SAC9DlB,KAAKqD,SAASjC,YAAYoC,GAE1B,MAAMC,EAAiBjD,SAAS8C,cAAc,KAC9CG,EAAexC,UAAUC,IAAI,WAAY,iBAAkB,SAC3DlB,KAAKqD,SAASjC,YAAYqC,GAE1B,MAAMC,EAAYlD,SAAS8C,cAAc,KACzCI,EAAUzC,UAAUC,IAAI,WAAY,aAAc,SAClDlB,KAAKqD,SAASjC,YAAYsC,GAE1B1D,KAAK2D,QAAU,CACX,gBAAmBJ,EACnB,mBAAsBC,EACtB,eAAkBC,EAClB,UAAaC,EAEpB,CAEDE,gBACI,OAAO5D,KAAKqD,QACf,CAEDQ,sBAAsBC,EAAQC,IAC1BD,EAAS9D,KAAK2D,QAAQG,IACfE,iBAAiB,QAASD,EACpC,EClCU,MAAME,EACjBtE,YAAYuE,EAAIC,EAAIC,GAChBpE,KAAKqE,EFLS,GEMdrE,KAAKsE,UAAW,EAChBtE,KAAKU,KAAOF,SAASC,gBAAgBhB,EAAc,KACnDR,EAAce,KAAKU,KAAM,CACrB,KAAQ,QACR,OAAU,UACV,eFRgB,IEWpBV,KAAKe,OAASP,SAASC,gBAAgBhB,EAAc,UACrDR,EAAce,KAAKe,OAAQ,CACvB,GAAMmD,EACN,GAAMC,EACN,EAAKnE,KAAKqE,IAGdrE,KAAKc,KAAON,SAASC,gBAAgBhB,EAAc,QACnDR,EAAce,KAAKc,KAAM,CACrB,EAAKoD,EACL,EAAKC,EACL,eFtBgB,IE0BpBnE,KAAKc,KAAKG,UAAUC,IAAI,cACxBlB,KAAKc,KAAKK,YAAciD,EAExBpE,KAAKU,KAAKU,YAAYpB,KAAKe,QAC3Bf,KAAKU,KAAKU,YAAYpB,KAAKc,KAC9B,CAEDsB,eACI,OAAOpC,KAAKU,IACf,CAcD6D,qBACIvE,KAAKU,KAAKO,UAAU0B,OAAO,UAC3B3C,KAAKU,KAAKO,UAAU0B,OAAO,aAC3B3C,KAAKU,KAAKO,UAAUC,IAAI,aAC3B,CAEDsD,qBACIxE,KAAKU,KAAKO,UAAUC,IAAI,SAC3B,CAGD0B,oBACI5C,KAAKU,KAAKO,UAAU0B,OAAO,cAC3B3C,KAAKU,KAAKO,UAAUC,IAAI,YAC3B,CAEDuD,oBACIzE,KAAKU,KAAKO,UAAUC,IAAI,cACxBlB,KAAKU,KAAKO,UAAU0B,OAAO,YAC9B,CAEDH,YAAYW,GACRnD,KAAKsE,SAAWnB,CACnB,ECpEU,MAAMuB,EACjB/E,cACIK,KAAK2E,eAAiBnE,SAAS8C,cAAc,OAC7CtD,KAAK2E,eAAe1D,UAAUC,IAAI,mBAElClB,KAAKqD,SAAW,IAAID,EAEpBpD,KAAK4E,YAAcpE,SAASC,gBAAgBhB,EAAc,OAC1DR,EAAce,KAAK4E,YAAa,CAC5B,QAAY,cACZ,MAAS,OACT,OAAU,SAGd5E,KAAK2E,eAAevD,YAAYpB,KAAKqD,SAASO,iBAC9C5D,KAAK2E,eAAevD,YAAYpB,KAAK4E,aACrC5E,KAAK6E,wBAGL7E,KAAK8E,OAAS,CAAC,EACf9E,KAAK+E,MAAQ,CAAC,EAEd/E,KAAKgF,MAAQ,GACbhF,KAAKiF,YAAc,EACnBjF,KAAKkF,QAAS,CACjB,CAGY,cAAC5C,GACVtC,KAAKmF,aAAa7C,GAClBtC,KAAKoF,kBAAkB9C,GACvB,IAAK,IAAI+C,EAAI,EAAGA,EAAIrF,KAAKgF,MAAMM,OAAQD,IAEnC,GADArF,KAAKiF,YAAcI,EACfrF,KAAKkF,OAAQ,CACb,MAAMK,EAAUvF,KAAKgF,MAAM/B,MAAM,EAAGoC,EAAI,SAClCrF,KAAKwF,OAAOxF,KAAKgF,MAAMK,GAAIE,EACpC,CAER,CAEDJ,aAAa7C,GACTA,EAAKmD,UAASC,IACV,IAAK,IAAIC,KAASD,EAAIE,SAAU,CAC5B,IAAI7F,EAAU,CAAC4F,EAAME,EAAGF,EAAMG,GAC1BC,EAAQ,IAAIrG,EAAOiG,EAAM/F,GAAI+F,EAAM9F,OAAQ,CAAC6F,EAAIG,EAAGH,EAAII,GAAI/F,GAC/DC,KAAK8E,OAAQ,QAAOiB,EAAMhD,WAAagD,EACvCA,EAAMjD,gBACN9C,KAAK4E,YAAYxD,YAAY2E,EAAM3D,eACtC,KAELE,EAAKmD,UAASC,IACV1F,KAAK4E,YAAYxD,YAAYsE,EAAItD,gBACjC,IAAI4D,EAAWN,EAAIO,cACnBjG,KAAK+E,MAAO,QAAOW,EAAI9F,MAAQoG,EAC/BA,EAASxB,oBAAT,GAEP,CAEDY,kBAAkB9C,GACd,IAAI4D,EAAe,QAAO5D,EAAK1C,KAC3BoG,EAAWhG,KAAK+E,MAAMmB,GAC1BlG,KAAKgF,MAAMmB,KAAKH,GAChB,IAAK,IAAIL,KAASrD,EAAKsD,SAAU,CAC7B,IAAIG,EAAQ/F,KAAK8E,OAAQ,QAAOa,EAAM/F,MACtCI,KAAKgF,MAAMmB,KAAKJ,GAChB/F,KAAKoF,kBAAkBO,GACvB3F,KAAKgF,MAAMmB,KAAKJ,EACnB,CACJ,CAEDlB,wBACI7E,KAAKqD,SAASQ,sBAAsB,mBAAmB,KACnD7D,KAAKiF,YAAc,EACnBjF,KAAKoG,WAAWpG,KAAKiF,YAArB,IAEJjF,KAAKqD,SAASQ,sBAAsB,sBAAsB,KAClD,GAAK7D,KAAKiF,YAAc,GAAGjF,KAAKoG,aAAapG,KAAKiF,YAAvB,IAEnCjF,KAAKqD,SAASQ,sBAAsB,kBAAkB,KAC9C7D,KAAKiF,YAAc,EAAIjF,KAAKgF,MAAMM,QAAQtF,KAAKoG,aAAapG,KAAKiF,YAAvB,IAElDjF,KAAKqD,SAASQ,sBAAsB,aAAa,KAC7C7D,KAAKkF,QAAS,EACdlF,KAAKiF,YAAcjF,KAAKgF,MAAMM,OAAS,EACvCtF,KAAKoG,WAAWpG,KAAKiF,YAArB,GAEP,CAEDmB,WAAWC,GACP,MAAMd,EAAUvF,KAAKgF,MAAM/B,MAAM,EAAGoD,EAAO,GACrCC,EAActG,KAAKgF,MAAM/B,MAAMoD,EAAO,GAC5C,IAAK,IAAIhB,EAAI,EAAGA,EAAIrF,KAAKgF,MAAMM,OAAQD,IAC/BA,GAAKgB,EACLrG,KAAKwF,OAAOxF,KAAKgF,MAAMK,GAAIE,GAEtBF,EAAIgB,GACTrG,KAAKuG,SAASvG,KAAKgF,MAAMK,GAAIiB,EAGxC,CAEDd,OAAOgB,EAAQjB,GACX,OAAO,IAAIkB,SAAQC,IACfC,YAAY,KACR,GAAIH,aAAkB9G,EAAO,CACzB,IAAIkH,EAAQ,EAMZ,GALArB,EAAQjG,SAAU+G,IACVA,EAAKzG,KAAO4G,EAAO5G,KACnBgH,GAAS,EACZ,IAES,IAAVA,EAEAJ,EAAO3D,gBACP2D,EAAOtD,WAAU,QAEhB,GAAc,IAAV0D,EAAa,CAElB,MAAMC,EAAUL,EAAOzD,QACjB+D,EAAgB9G,KAAK+E,MAAO,QAAO8B,KACzCL,EAAO/D,gBAAgBqE,GACvBN,EAAOtD,WAAU,EACpB,CACGlD,KAAKiF,cAAgBjF,KAAKgF,MAAMM,OAAS,GACzCtF,KAAK+E,MAAO,UAASnC,mBAE5B,MACQ4D,aAAkBvC,IACvBuC,EAAOjC,qBACPiC,EAAOhE,aAAY,IAEvBkE,GAAS,GHtID,IG0GZ,GA+BP,CAEDH,SAASC,EAAQF,GACb,GAAIE,aAAkB9G,EAAO,CACzB,IAAIkH,EAAQ,EAMZ,GALAN,EAAYhH,SAAU+G,IACdA,EAAKzG,KAAO4G,EAAO5G,KACnBgH,GAAS,EACZ,IAES,IAAVA,EAAa,CACb,MAAMC,EAAUL,EAAOzD,QACjB+D,EAAgB9G,KAAK+E,MAAO,QAAO8B,KACzCL,EAAOnE,gBAAgByE,EAC1B,MACkB,IAAVF,GACLJ,EAAO1D,gBAEX0D,EAAOtD,WAAU,EACpB,MACQsD,aAAkBvC,IACvBuC,EAAOhE,aAAY,GACnBgE,EAAOhC,qBAEd,CAGDpC,eACI,OAAOpC,KAAK2E,cACf,CAEDoC,cAAcC,GACV,IAAIC,EAAQD,EAAW,GACnBE,EAASF,EAAW,GACxB/H,EAAce,KAAK4E,YAAa,CAC5B,QAAY,OAAMqC,KAASC,KAElC,EClLU,MAAMC,EACjBxH,cACIK,KAAKoH,cAAgB5G,SAAS8C,cAAc,OAC5CtD,KAAKoH,cAAcnG,UAAUC,IAAI,uBACpC,CAEDkB,eACI,OAAOpC,KAAKoH,aACf,ECLU,MAAMC,EACjB1H,YAAYC,EAAI0H,EAAOzH,GACnBG,KAAKJ,GAAKA,EACVI,KAAK6F,EAAI,EACT7F,KAAK8F,EAAI,EACT9F,KAAKuH,IAAM,EACXvH,KAAKsH,MAAQA,EACbtH,KAAKH,OAASA,EACdG,KAAK4F,SAAW,GAChB5F,KAAKwH,SAAW,KAChBxH,KAAKyH,OAAS,EACdzH,KAAKgG,SAAW,CACnB,CAEDP,SAAS1B,GACLA,EAAG/D,MACH,IAAK,IAAIqF,EAAI,EAAGA,EAAIrF,KAAK4F,SAASN,OAAQD,IACtCrF,KAAK4F,SAASP,GAAGI,SAAS1B,EAEjC,CAGD3B,eAGI,OAFKpC,KAAKgG,WACNhG,KAAKgG,SAAW,IAAI/B,EAASjE,KAAK6F,EAAG7F,KAAK8F,EAAG9F,KAAKsH,QAC/CtH,KAAKgG,SAAS5D,cACxB,CAED6D,cACI,OAAOjG,KAAKgG,QACf,EC9BU,MAAM0B,EACjB/H,YAAYgI,GACR3H,KAAK2H,KAAOA,EACZ3H,KAAK4H,KAAO,EACZ5H,KAAK6H,KAAO,EAEZ7H,KAAK8H,SAAW9H,KAAK+H,YAAY,EAAG,EAAG,MACvC/H,KAAKgI,SAAShI,KAAK8H,SNRJ9G,IMSfhB,KAAKiI,cAAcjI,KAAK8H,UACxB9H,KAAKkI,eAAelI,KAAK8H,UACzB9H,KAAKmI,SAASnI,KAAK8H,UACnB9H,KAAKoI,WAAWpI,KAAK8H,SAExB,CAEDO,oBACI,MAAO,CAACrI,KAAK4H,KNlBE5G,GMkBchB,KAAK6H,KNjBnB7G,GMkBlB,CAEDsH,UACI,OAAOtI,KAAK8H,QACf,CAEDC,YAAYzF,EAAMmF,EAAOD,GACrB,IAAIxB,EAAW,IAAIqB,EAAa/E,EAAMtC,KAAK2H,KAAKrF,GAAMgF,MAAOtH,KAAK2H,KAAKrF,GAAMzC,QAC7EmG,EAASyB,MAAQA,EACjBzB,EAASF,EAAI2B,EACbzB,EAASwB,SAAWA,EAGpB,IAAK,IAAInC,EAAI,EAAGA,EAAIrF,KAAK2H,KAAKrF,GAAMsD,SAASN,OAAQD,IACjDW,EAASJ,SAASO,KACdnG,KAAK+H,YACD/H,KAAK2H,KAAKrF,GAAMsD,SAASP,GACzBoC,EAAQ,EACRpC,GAAK,EAAIW,EAASJ,SAASP,EAAG,GAAK,OAI/C,OAAOW,CACV,CAGDgC,SAAS1F,GACLA,EAAKwD,EN7CU9E,GM6CNsB,EAAKmF,MACd,IAAK,MAAMpC,KAAK/C,EAAKsD,SACjB5F,KAAKgI,SAAS1F,EAAKsD,SAASP,GAEnC,CAED4C,cAAc3F,GAEV,IAAK,IAAI+C,EAAI,EAAGA,EAAI/C,EAAKsD,SAASN,OAAQD,IACtCrF,KAAKiI,cAAc3F,EAAKsD,SAASP,IACjCrF,KAAKuI,iBAAiBjG,EAE7B,CAED4F,eAAe5F,GACX,IAAK,IAAI+C,EAAI,EAAGA,EAAI/C,EAAKsD,SAASN,OAAQD,IACtCrF,KAAKkI,eAAe5F,EAAKsD,SAASP,IAEV,GAAxB/C,EAAKsD,SAASN,OACdhD,EAAKiF,IAAMjF,EAAKuD,EAEXvD,EAAKsD,SAASN,QAAU,IAC7BhD,EAAKiF,IAAMjF,EAAKuD,GAAMvD,EAAKsD,SAAStD,EAAKsD,SAASN,OAAO,GAAGO,EAAIvD,EAAKsD,SAAS,GAAGC,GAAK,EAE7F,CAGDsC,SAAS7F,EAAMkG,EAAS,GACpBlG,EAAKuD,GAAK2C,EACVA,GAAUlG,EAAKiF,IACfjF,EAAKiF,IAAM,EAEX,IAAK,IAAIlC,EAAI,EAAGA,EAAI/C,EAAKsD,SAASN,OAAQD,IACtCrF,KAAKmI,SAAS7F,EAAKsD,SAASP,GAAImD,EAEvC,CAEDD,iBAAiBjG,GACb,IAAK,IAAI+C,EAAI,EAAGA,EAAI/C,EAAKsD,SAASN,OAAQD,IACtCrF,KAAKuI,iBAAiBjG,EAAKsD,SAASP,IAGxC,IAAK,IAAIA,EAAI,EAAGA,EAAI/C,EAAKsD,SAASN,OAAS,EAAGD,IAAK,CAC/C,IAAIoD,GAAe,IACnBnG,EAAKsD,SAASP,GAAGI,UAAUiD,IACvBD,EAAe7G,KAAK+G,IAAIF,EAAcC,EAAQ7C,EAA9C,IAGJ,IAAI+C,EAAcC,IAClBvG,EAAKsD,SAASP,EAAE,GAAGI,UAAUiD,IACzBE,EAAchH,KAAKkH,IAAIF,EAAaF,EAAQ7C,EAA5C,IAEA4C,GAAgBG,GAChBtG,EAAKsD,SAASP,EAAG,GAAGI,UAAWiD,IAC3BA,EAAQ7C,GAAM4C,EAAeG,ENpG1B5H,EMoGH,GAGX,CACJ,CAEDoH,WAAW9F,GACP,IAAIyG,EAAiBF,IAErB,IAAK,IAAIxD,EAAI,EAAGA,EAAI/C,EAAKsD,SAASN,OAAS,EAAGD,IAAK,CAC/C/C,EAAKsD,SAASP,GAAGI,UAAUiD,IACvBK,EAAiBnH,KAAKkH,IAAIC,EAAgBL,EAAQ7C,EAAlD,IAER,MAAMmD,ENjHShI,GMiHA+H,EACXC,EAAQ,GACR1G,EAAKmD,UAAWiD,IACZA,EAAQ7C,GAAKmD,EACbhJ,KAAK4H,KAAOhG,KAAK+G,IAAI3I,KAAK4H,KAAMc,EAAQ7C,GACxC7F,KAAK6H,KAAOjG,KAAK+G,IAAI3I,KAAK6H,KAAMa,EAAQ5C,EAAxC,GAGX,CACJ,ECtHDtF,SAASwD,iBAAiB,oBAAoB,KAC1CiF,QAAQC,IAAI,uBACZ,MAAMC,EAAO3I,SAAS4I,eAAe,QAE/BC,EAAa,IAAIlC,EACjBmC,EAAQ,IAAI5E,EAElByE,EAAK/H,YAAYiI,EAAWjH,gBAC5B+G,EAAK/H,YAAYkI,EAAMlH,gBAoBL,IAAImH,WAVJ,IAU0BC,MAAO,CAAC,IAVpD,MAWMC,EAAqB,IAAI/B,EAAmBgC,UAClDJ,EAAMvC,cAAc0C,EAAmBpB,qBACvCiB,EAAMK,QAAQF,EAAmBnB,UAAjC,G","sources":["webpack://dendriform_js/webpack/bootstrap","webpack://dendriform_js/./src/utilities/util.js","webpack://dendriform_js/./src/tree_visualizer/arrow.js","webpack://dendriform_js/./src/tree_visualizer/constants.js","webpack://dendriform_js/./src/tree_visualizer/nav_steps.js","webpack://dendriform_js/./src/tree_visualizer/tree_node.js","webpack://dendriform_js/./src/tree_visualizer/graph.js","webpack://dendriform_js/./src/controller/controller_container.js","webpack://dendriform_js/./src/tree_visualizer/node_positions.js","webpack://dendriform_js/./src/tree_visualizer/position_calculator.js","webpack://dendriform_js/./src/index.js"],"sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","export const setAttributes = (element, attributes) => {\r\n    Object.keys(attributes).forEach(key => {\r\n        element.setAttribute(key, attributes[key]);\r\n    })\r\n}\r\n\r\nexport const svgNameSpace = \"http://www.w3.org/2000/svg\";","import { setAttributes, svgNameSpace } from \"../utilities/util\";\r\nimport { RADIUS, STROKE_WIDTH, TIME_GAP } from \"./constants\";\r\n\r\nexport default class Arrow {\r\n    constructor(id, result, startCoor, endCoor) {  // \r\n        this.id = `line-${id}`\r\n        this.markerWidth = 50\r\n        this.returned = false\r\n        this.markerHeight = 30\r\n        this.startCoor = startCoor \r\n        this.endCoor = endCoor \r\n        this.result = result \r\n        this.midPoint = 0\r\n        this.generateCoors(this.startCoor, this.endCoor)\r\n        this.findMidpoint()\r\n        this.defs = document.createElementNS(svgNameSpace, \"defs\");\r\n        this.gTag = document.createElementNS(svgNameSpace, \"g\");\r\n        this.marker = document.createElementNS(svgNameSpace, \"marker\") // gives arrowhead\r\n        setAttributes(this.marker, {\r\n            \"id\": `arrowhead-${this.id}`,\r\n            \"markerWidth\": this.markerWidth,\r\n            \"markerHeight\": this.markerHeight, \r\n            \"refX\": '1', \r\n            \"refY\": '1',\r\n            \"orient\": 'auto', \r\n            \"markerUnits\": 'strokeWidth'\r\n        });\r\n\r\n        this.line = document.createElementNS(svgNameSpace, \"line\")\r\n        setAttributes(this.line, {\r\n            \"x1\": `${this.startCoor[0]}`, // where the line starts\r\n            \"y1\": `${this.startCoor[1]}`, \r\n            \"x2\": `${this.endCoor[0]}`, // where the line ends\r\n            \"y2\": `${this.endCoor[1]}`, \r\n            \"marker-end\": `url(#arrowhead-${this.id})`, \r\n            \"id\": `${this.id}`\r\n        })\r\n        this.path = document.createElementNS(svgNameSpace, 'path')\r\n        setAttributes(this.path, {\r\n            \"d\": 'M 1,0 L 1,2 L 3,1 Z'\r\n        })\r\n\r\n        this.text = document.createElementNS(svgNameSpace, 'text')\r\n        setAttributes(this.text, { \r\n            \"x\": this.midPoint[0], \r\n            \"y\": this.midPoint[1], \r\n            \"stroke-width\": STROKE_WIDTH\r\n        });\r\n        \r\n        this.circle = document.createElementNS(svgNameSpace, 'circle')\r\n        setAttributes(this.circle, {\r\n            \"cx\": this.midPoint[0], \r\n            \"cy\": this.midPoint[1], \r\n            \"r\": RADIUS/2,\r\n            \"fill\": \"white\", // background color\r\n        })\r\n\r\n        this.line.classList.add(\"call-arrow\")\r\n        this.text.classList.add(\"result-text\")\r\n        this.gTag.classList.add(\"arrow-wrapper\")\r\n        this.text.textContent = this.result\r\n\r\n        this.gTag.appendChild(this.defs)\r\n        this.gTag.appendChild(this.line)\r\n        this.defs.appendChild(this.marker)\r\n        this.marker.appendChild(this.path)\r\n        this.gTag.appendChild(this.circle)\r\n        this.gTag.appendChild(this.text)\r\n    }\r\n\r\n    generateCoors(start, end) {\r\n        const [x1, y1] = start;\r\n        const [x2, y2] = end;\r\n\r\n        const arrowLength = Math.sqrt((x2 -x1)**2 + (y2-y1)**2) // distance formula \r\n        const startRatio = arrowLength / RADIUS\r\n        const endRatio = arrowLength / (RADIUS+4)\r\n        const bigX = x2 - x1 // there are two triangles that are similar\r\n        const bigY = y2 - y1\r\n\r\n        this.startCoor = [x1 + (bigX / startRatio), y1 + (bigY / startRatio)] \r\n        this.endCoor = [x2 - (bigX / endRatio), y2 - (bigY / endRatio)]\r\n        \r\n        this.flippedStartCoor = [x2 - (bigX / startRatio), y2 - (bigY / startRatio)]\r\n        this.flippedEndCoor = [x1 + (bigX / endRatio), y1 + (bigY / endRatio)] \r\n    }\r\n\r\n    findMidpoint() { \r\n        const [x1, y1] = this.startCoor;\r\n        const [x2, y2] = this.endCoor;\r\n\r\n        this.midPoint = [(x1 + x2)/2, (y1+y2)/2]\r\n    }\r\n\r\n    getDOMObject() {\r\n        return this.gTag;\r\n    }\r\n\r\n    hideReturnArrow(node) {\r\n        this.unflipCoors() // renders arrow\r\n        this.text.classList.add(\"hidden\")\r\n        this.circle.classList.add(\"hidden\")\r\n\r\n        node.setComplete(false) // changes node to processing\r\n    } \r\n\r\n    showReturnArrow(node) { \r\n        this.flipCoors()\r\n        this.line.classList.remove(\"hidden\")\r\n        this.text.classList.remove(\"hidden\")\r\n        this.circle.classList.remove(\"hidden\")\r\n\r\n        node.setComplete(true) // changes node to completed\r\n        node.showCompletedNode()\r\n    }\r\n\r\n\r\n    // show() { \r\n    //     return new Promise(resolve => {\r\n    //         setTimeout (() => {\r\n    //             this.line.classList.remove('hidden');\r\n    //             resolve();\r\n    //         }, TIME_GAP)\r\n    //     })\r\n    // }\r\n\r\n    \r\n    showCallArrow() { \r\n        this.line.classList.remove('hidden');\r\n        this.text.classList.add(\"hidden\")\r\n        this.circle.classList.add(\"hidden\")\r\n    }\r\n\r\n    hideCallArrow() { \r\n        this.line.classList.add('hidden')\r\n        this.text.classList.add(\"hidden\")\r\n        this.circle.classList.add(\"hidden\")\r\n    }\r\n\r\n    getId() { \r\n        return tthis.id.slice(5)\r\n    }\r\n\r\n    // return(node) {\r\n    //     return new Promise(resolve => {\r\n    //         setTimeout (() => {\r\n    //             this.gTag.appendChild(this.circle)\r\n    //             this.gTag.appendChild(this.text) // shows return value\r\n\r\n    //             this.flipCoors()\r\n    //             this.setReturn(true)\r\n    //             node.completed()\r\n    //             resolve();\r\n    //         }, TIME_GAP)\r\n    //     })\r\n    // }\r\n    \r\n    // return(node) {\r\n    //     this.gTag.appendChild(this.circle)\r\n    //     this.gTag.appendChild(this.text) // shows return value\r\n\r\n    //     this.flipCoors()\r\n    //     this.setReturn(true)\r\n    //     node.completed()\r\n    // }\r\n\r\n    flipCoors() {\r\n        setAttributes(this.line, {\r\n            \"x1\": `${this.flippedStartCoor[0]}`,\r\n            \"y1\": `${this.flippedStartCoor[1]}`, \r\n            \"x2\": `${this.flippedEndCoor[0]}`, \r\n            \"y2\": `${this.flippedEndCoor[1]}`,\r\n        }) \r\n    }\r\n\r\n    unflipCoors() { \r\n        setAttributes(this.line, {\r\n            \"x1\": `${this.startCoor[0]}`,\r\n            \"y1\": `${this.startCoor[1]}`, \r\n            \"x2\": `${this.endCoor[0]}`, \r\n            \"y2\": `${this.endCoor[1]}`,  \r\n        })\r\n    }\r\n\r\n    setReturn(status) { \r\n        this.returned = status\r\n    }\r\n\r\n}","export const RADIUS = 10; \r\nexport const SPACE_X = RADIUS * 2.5;\r\nexport const SPACE_Y = RADIUS * 5;\r\nexport const STROKE_WIDTH = 1;\r\nexport const TIME_GAP = 300","export default class NavSteps {\r\n    constructor() {\r\n\r\n        this.navSteps = document.createElement(\"div\");\r\n        this.navSteps.classList.add('nav-steps')\r\n\r\n        const beginningButton = document.createElement(\"i\")\r\n        beginningButton.classList.add(\"fa-solid\", \"fa-backward\", \"fa-3x\")\r\n        this.navSteps.appendChild(beginningButton);\r\n\r\n        const previousStepButton = document.createElement(\"i\")\r\n        previousStepButton.classList.add(\"fa-solid\", \"fa-caret-left\", \"fa-3x\")\r\n        this.navSteps.appendChild(previousStepButton);\r\n\r\n        const nextStepButton = document.createElement(\"i\");\r\n        nextStepButton.classList.add(\"fa-solid\", \"fa-caret-right\", \"fa-3x\");\r\n        this.navSteps.appendChild(nextStepButton);\r\n\r\n        const endButton = document.createElement(\"i\");\r\n        endButton.classList.add(\"fa-solid\", \"fa-forward\", \"fa-3x\");\r\n        this.navSteps.appendChild(endButton);\r\n\r\n        this.buttons = {\r\n            'beginningButton': beginningButton,\r\n            'previousStepButton': previousStepButton, \r\n            'nextStepButton': nextStepButton,\r\n            'endButton': endButton\r\n        }\r\n    }\r\n\r\n    getDOMElement() { \r\n        return this.navSteps;\r\n    }\r\n\r\n    addClickEventListener(button, cb) {\r\n        button = this.buttons[button] // button is an element \r\n        button.addEventListener(\"click\", cb)\r\n    }\r\n}","import { setAttributes, svgNameSpace } from \"../utilities/util\";\r\nimport { RADIUS, STROKE_WIDTH, TIME_GAP} from \"./constants\";\r\n\r\nexport default class TreeNode {\r\n    constructor(cx, cy, value) {\r\n        this.r = RADIUS;\r\n        this.complete = false\r\n        this.gTag = document.createElementNS(svgNameSpace, \"g\");\r\n        setAttributes(this.gTag, {\r\n            \"fill\": \"white\",\r\n            \"stroke\": \"#614124\",\r\n            \"stroke-width\": STROKE_WIDTH\r\n        });\r\n\r\n        this.circle = document.createElementNS(svgNameSpace, \"circle\");\r\n        setAttributes(this.circle, {\r\n            \"cx\": cx,\r\n            \"cy\": cy,\r\n            \"r\": this.r\r\n        });\r\n\r\n        this.text = document.createElementNS(svgNameSpace, \"text\");\r\n        setAttributes(this.text, {\r\n            \"x\": cx,\r\n            \"y\": cy,\r\n            \"stroke-width\": STROKE_WIDTH\r\n        });\r\n    \r\n\r\n        this.text.classList.add(\"param-text\");\r\n        this.text.textContent = value;\r\n\r\n        this.gTag.appendChild(this.circle);\r\n        this.gTag.appendChild(this.text);\r\n    }\r\n\r\n    getDOMObject() {\r\n        return this.gTag;\r\n    }\r\n\r\n    // show() { \r\n    //     return new Promise(resolve => { \r\n    //         setTimeout (() => {\r\n    //             this.gTag.classList.remove('hidden');\r\n    //             this.gTag.classList.remove('completed')\r\n    //             this.gTag.classList.add('processing')\r\n    //             resolve();\r\n    //         }, TIME_GAP)\r\n    //     })\r\n    //     // show, wait, highlight, processing\r\n    // }\r\n\r\n    showProcessingNode() { // makes initial node\r\n        this.gTag.classList.remove('hidden');\r\n        this.gTag.classList.remove('completed')\r\n        this.gTag.classList.add('processing')\r\n    }\r\n\r\n    hideProcessingNode() { \r\n        this.gTag.classList.add(\"hidden\") \r\n    }\r\n\r\n\r\n    showCompletedNode() { \r\n        this.gTag.classList.remove(\"processing\")\r\n        this.gTag.classList.add(\"completed\") // node outline green \r\n    }\r\n\r\n    hideCompletedNode() { \r\n        this.gTag.classList.add(\"processing\")\r\n        this.gTag.classList.remove(\"completed\")    \r\n    }   \r\n\r\n    setComplete(status) { \r\n        this.complete = status\r\n    }\r\n\r\n\r\n};","import { findRelativeConfig } from \"@babel/core/lib/config/files\";\r\nimport { setAttributes, svgNameSpace} from \"../utilities/util\";\r\nimport Arrow from \"./arrow\";\r\nimport { TIME_GAP } from \"./constants\";\r\nimport NavSteps from \"./nav_steps\";\r\nimport TreeNode from \"./tree_node\";\r\n\r\nexport default class Graph {\r\n    constructor() {\r\n        this.graphContainer = document.createElement(\"div\");\r\n        this.graphContainer.classList.add(\"graph-container\");\r\n\r\n        this.navSteps = new NavSteps()\r\n\r\n        this.graphWindow = document.createElementNS(svgNameSpace, \"svg\");\r\n        setAttributes(this.graphWindow, {\r\n            \"viewBox\": `0 0 100 100`,\r\n            \"width\": \"100%\",\r\n            \"height\": \"100%\"\r\n        });\r\n\r\n        this.graphContainer.appendChild(this.navSteps.getDOMElement())\r\n        this.graphContainer.appendChild(this.graphWindow);\r\n        this.addNavButtonListeners()\r\n\r\n\r\n        this.arrows = {}\r\n        this.nodes = {}\r\n\r\n        this.steps = []\r\n        this.currentStep = 0 \r\n        this.noSkip = true\r\n    };\r\n\r\n\r\n    async animate(node) {\r\n        this.generateTree(node); // puts elements on document, but invisible for now\r\n        this.addElementsToHash(node)\r\n        for (let i = 0; i < this.steps.length; i++) { \r\n            this.currentStep = i\r\n            if (this.noSkip) {\r\n                const doSteps = this.steps.slice(0, i + 1)\r\n                await this.doStep(this.steps[i], doSteps)\r\n            }\r\n        }\r\n    }\r\n\r\n    generateTree(node) { \r\n        node.traverse(cur => { // generate nodes\r\n            for (let child of cur.children) { // generate arrows\r\n                let endCoor = [child.x, child.y] \r\n                let arrow = new Arrow (child.id, child.result, [cur.x, cur.y], endCoor)\r\n                this.arrows[`line-${arrow.getId()}`] = arrow\r\n                arrow.hideCallArrow() // hide them \r\n                this.graphWindow.appendChild(arrow.getDOMObject())\r\n            }\r\n        })\r\n        node.traverse(cur => {  // generate nodes\r\n            this.graphWindow.appendChild(cur.getDOMObject())\r\n            let treeNode = cur.getTreeNode()\r\n            this.nodes[`node-${cur.id}`] = treeNode\r\n            treeNode.hideProcessingNode() // hide nodes\r\n        })\r\n    }\r\n\r\n    addElementsToHash(node) { // adds in dfs order which is call order\r\n        let treeNodeKey = `node-${node.id}`\r\n        let treeNode = this.nodes[treeNodeKey] // add node to hash\r\n        this.steps.push(treeNode) // add step to hash\r\n        for (let child of node.children) {\r\n            let arrow = this.arrows[`line-${child.id}`]\r\n            this.steps.push(arrow)\r\n            this.addElementsToHash(child)\r\n            this.steps.push(arrow)\r\n        }\r\n    }\r\n    \r\n    addNavButtonListeners() { \r\n        this.navSteps.addClickEventListener('beginningButton', () => {\r\n            this.currentStep = 0;\r\n            this.jumpToStep(this.currentStep);\r\n        })\r\n        this.navSteps.addClickEventListener('previousStepButton', () => {\r\n            if (0 <= this.currentStep - 1) this.jumpToStep(--this.currentStep);\r\n        })\r\n        this.navSteps.addClickEventListener('nextStepButton', () => {\r\n            if (this.currentStep + 1 < this.steps.length) this.jumpToStep(++this.currentStep);\r\n        })\r\n        this.navSteps.addClickEventListener('endButton', () => {\r\n            this.noSkip = false\r\n            this.currentStep = this.steps.length - 1\r\n            this.jumpToStep(this.currentStep)\r\n        })\r\n    }\r\n\r\n    jumpToStep(step) { \r\n        const doSteps = this.steps.slice(0, step + 1) \r\n        const hiddenSteps = this.steps.slice(step + 1)\r\n        for (let i = 0; i < this.steps.length; i++) {\r\n            if (i <= step) {\r\n                this.doStep(this.steps[i], doSteps)\r\n            }\r\n            else if (i > step) {\r\n                this.undoStep(this.steps[i], hiddenSteps)\r\n            }\r\n        }\r\n    }\r\n\r\n    doStep(object, doSteps) { \r\n        return new Promise(resolve => {\r\n            setTimeout (() => {\r\n                if (object instanceof Arrow) {\r\n                    let count = 0\r\n                    doSteps.forEach( (step) => { \r\n                        if (step.id === object.id) {\r\n                            count += 1\r\n                        }\r\n                    })\r\n                    if (count === 1) {\r\n                        // if there is no returned count return call arrow\r\n                        object.showCallArrow() \r\n                        object.setReturn(false)\r\n                    }\r\n                    else if (count === 2) {\r\n        \r\n                        const arrowId = object.getId() // node that becomes complete has the same id as arrow\r\n                        const nodeReturning = this.nodes[`node-${arrowId}`]\r\n                        object.showReturnArrow(nodeReturning)\r\n                        object.setReturn(true)\r\n                    }\r\n                    if (this.currentStep === this.steps.length - 1) {\r\n                        this.nodes[`node-0`].showCompletedNode()\r\n                    }\r\n                }\r\n                else if (object instanceof TreeNode) {\r\n                    object.showProcessingNode()\r\n                    object.setComplete(false)\r\n                }\r\n                resolve()\r\n            }, TIME_GAP) \r\n        })\r\n    }\r\n\r\n    undoStep(object, hiddenSteps) {\r\n        if (object instanceof Arrow) {\r\n            let count = 0\r\n            hiddenSteps.forEach( (step) => { \r\n                if (step.id === object.id) {\r\n                    count += 1\r\n                }\r\n            })\r\n            if (count === 1) { \r\n                const arrowId = object.getId() // node that becomes complete has the same id as arrow\r\n                const nodeReturning = this.nodes[`node-${arrowId}`]\r\n                object.hideReturnArrow(nodeReturning)\r\n            }\r\n            else if (count === 2) {\r\n                object.hideCallArrow()\r\n            }\r\n            object.setReturn(false)\r\n        }\r\n        else if (object instanceof TreeNode) {\r\n            object.setComplete(false)\r\n            object.hideProcessingNode()\r\n        }\r\n    }\r\n\r\n\r\n    getDOMObject() {\r\n        return this.graphContainer;\r\n    }\r\n\r\n    resizeViewBox(dimensions) {\r\n        let width = dimensions[0]\r\n        let height = dimensions[1]\r\n        setAttributes(this.graphWindow, {\r\n            \"viewBox\": `0 0 ${width} ${height}`\r\n        })\r\n    }\r\n\r\n};","export default class ControllerContainer {\r\n    constructor() {\r\n        this.mainContainer = document.createElement(\"div\");\r\n        this.mainContainer.classList.add(\"controller-container\");\r\n    }\r\n\r\n    getDOMObject() {\r\n        return this.mainContainer;\r\n    }\r\n};","import Arrow from \"./arrow\";\r\nimport TreeNode from \"./tree_node\";\r\n\r\nexport default class NodePosition { // this class finds the position and adds it to our Tree data indexing with id\r\n    constructor(id, input, result) {\r\n        this.id = id;\r\n        this.x = 0;\r\n        this.y = 0; \r\n        this.mod = 0\r\n        this.input = input;\r\n        this.result = result;\r\n        this.children = [];\r\n        this.prevNode = null;\r\n        this.level = -1;\r\n        this.treeNode = 0\r\n    }\r\n\r\n    traverse(cb) {\r\n        cb(this);\r\n        for (let i = 0; i < this.children.length; i++) {\r\n            this.children[i].traverse(cb);\r\n        }\r\n    }\r\n\r\n\r\n    getDOMObject() {\r\n        if (!this.treeNode)\r\n            this.treeNode = new TreeNode(this.x, this.y, this.input);\r\n        return this.treeNode.getDOMObject();\r\n    }\r\n\r\n    getTreeNode() { \r\n        return this.treeNode\r\n    }\r\n\r\n\r\n}","import NodePosition from \"./node_positions\";\r\nimport { SPACE_X, SPACE_Y } from \"./constants\";\r\n\r\nexport default class PositionCalculator {\r\n    constructor(data) { //\r\n        this.data = data;\r\n        this.maxX = 0;\r\n        this.maxY = 0;\r\n\r\n        this.rootNode = this.getPosition(0, 1, null);\r\n        this.getYCoor(this.rootNode, SPACE_Y);\r\n        this.firstTraverse(this.rootNode);\r\n        this.centerChildren(this.rootNode);\r\n        this.applyMod(this.rootNode);\r\n        this.shiftTrees(this.rootNode);\r\n\r\n    }\r\n\r\n    getTreeDimensions() {\r\n        return [this.maxX + SPACE_X, this.maxY + SPACE_Y] \r\n    }\r\n\r\n    getRoot() {\r\n        return this.rootNode;\r\n    }\r\n\r\n    getPosition(node, level, prevNode) { // makes tree of instances\r\n        let treeNode = new NodePosition(node, this.data[node].input, this.data[node].result);\r\n        treeNode.level = level;\r\n        treeNode.y = level;\r\n        treeNode.prevNode = prevNode;\r\n\r\n\r\n        for (let i = 0; i < this.data[node].children.length; i++) {\r\n            treeNode.children.push(\r\n                this.getPosition( // recursively calls itself to make more nodes                    \r\n                    this.data[node].children[i], \r\n                    level + 1, \r\n                    i >= 1 ? treeNode.children[i -1] : null \r\n                )\r\n            )\r\n        }\r\n        return treeNode; \r\n    }\r\n\r\n    // get y coor of each node by multiplying level by increment\r\n    getYCoor(node) {\r\n        node.y = node.level * SPACE_Y;\r\n        for (const i in node.children) {\r\n            this.getYCoor(node.children[i]);\r\n        }\r\n    } \r\n\r\n    firstTraverse(node) { // this is the step where we set the initial positions and calculate how much the nodes children have to move to be under their parent\r\n\r\n        for (let i = 0; i < node.children.length; i++) { // [1, 4], [2, 3]\r\n            this.firstTraverse(node.children[i]); // 1, 2\r\n            this.fixNodeConflicts(node);\r\n        }\r\n    }\r\n\r\n    centerChildren(node) {\r\n        for (let i = 0; i < node.children.length; i++) { // [1, 4], [2, 3]\r\n            this.centerChildren(node.children[i]) // 1, 2\r\n        }\r\n        if (node.children.length == 1) { // if that node has only one child then it will be under the node \r\n            node.mod = node.x\r\n        }\r\n        else if (node.children.length >= 2) {\r\n            node.mod = node.x - ((node.children[node.children.length-1].x + node.children[0].x) / 2) // finds the average between the two first and last node childrens\r\n        }\r\n    }\r\n\r\n\r\n    applyMod(node, modSum = 0) { // gives final position of each node\r\n        node.x += modSum \r\n        modSum += node.mod\r\n        node.mod = 0;\r\n\r\n        for (let i = 0; i < node.children.length; i++) {\r\n            this.applyMod(node.children[i], modSum);\r\n        }\r\n    }\r\n   \r\n    fixNodeConflicts(node) { \r\n        for (let i = 0; i < node.children.length; i++) { \r\n            this.fixNodeConflicts(node.children[i])\r\n        }\r\n\r\n        for (let i = 0; i < node.children.length - 1; i++) {\r\n            let rightContour = -Infinity;\r\n            node.children[i].traverse((curNode) => {\r\n                rightContour = Math.max(rightContour, curNode.x);\r\n            })\r\n\r\n            let leftContour = Infinity;\r\n            node.children[i+1].traverse((curNode) => { // want to find the node next to it's left contour because the right of one tree collides with the left of another \r\n                leftContour = Math.min(leftContour, curNode.x);\r\n            })\r\n            if (rightContour >= leftContour) { // if the right part of the left tree is overlapping, iterate through the right tree and move everything over\r\n                node.children[i+ 1].traverse( (curNode) => {\r\n                    curNode.x += (rightContour - leftContour + SPACE_X)\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    shiftTrees(node) {\r\n        let leftestContour = Infinity\r\n\r\n        for (let i = 0; i < node.children.length - 1; i++) {\r\n            node.children[i].traverse((curNode) => {\r\n                leftestContour = Math.min(leftestContour, curNode.x);\r\n            })\r\n        const shift = -leftestContour + SPACE_X\r\n        if (shift > 0) {\r\n            node.traverse ((curNode) => {\r\n                curNode.x += shift\r\n                this.maxX = Math.max(this.maxX, curNode.x); // finds the most right our tree goes\r\n                this.maxY = Math.max(this.maxY, curNode.y); // the depth of our tree\r\n            })\r\n        }\r\n    }\r\n}}","import Graph from \"./tree_visualizer/graph\";\r\nimport ControllerContainer from \"./controller/controller_container\";\r\nimport FuncRunner from \"./computer/func_runner\";\r\nimport PositionCalculator from \"./tree_visualizer/position_calculator\";\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n    console.log(\"DOM content loaded!\");\r\n    const root = document.getElementById(\"root\");\r\n\r\n    const controller = new ControllerContainer();\r\n    const graph = new Graph();\r\n\r\n    root.appendChild(controller.getDOMObject());\r\n    root.appendChild(graph.getDOMObject());\r\n\r\n    // Binomial coefficient \r\n    // const argsInput = \"n, k\"\r\n    // const fibFn = `\r\n    // if (k == 0 || n == k)\r\n    //     return 1\r\n    // return fn(n-1, k-1) + fn(n-1, k)\r\n    // `\r\n\r\n    const argsInput = \"n\"\r\n    const fibFn = `\r\n    if (n == 0 || n == 1)\r\n    return n\r\n  \r\n    return fn(n-1) + fn(n-2)\r\n    `\r\n\r\n    // const fR = new FuncRunner(argsInput, fibFn, [7]); \r\n    // const treeData = fR.runFunc()\r\n    const userInput = new user_input(argsInput, fibfn, [7])\r\n    const positionCalculator = new PositionCalculator(treeData)\r\n    graph.resizeViewBox(positionCalculator.getTreeDimensions())\r\n    graph.animate(positionCalculator.getRoot());\r\n    \r\n});"],"names":["__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","setAttributes","element","attributes","Object","keys","forEach","key","setAttribute","svgNameSpace","Arrow","constructor","id","result","startCoor","endCoor","this","markerWidth","returned","markerHeight","midPoint","generateCoors","findMidpoint","defs","document","createElementNS","gTag","marker","line","path","text","circle","RADIUS","classList","add","textContent","appendChild","start","end","x1","y1","x2","y2","arrowLength","Math","sqrt","startRatio","endRatio","bigX","bigY","flippedStartCoor","flippedEndCoor","getDOMObject","hideReturnArrow","node","unflipCoors","setComplete","showReturnArrow","flipCoors","remove","showCompletedNode","showCallArrow","hideCallArrow","getId","tthis","slice","setReturn","status","NavSteps","navSteps","createElement","beginningButton","previousStepButton","nextStepButton","endButton","buttons","getDOMElement","addClickEventListener","button","cb","addEventListener","TreeNode","cx","cy","value","r","complete","showProcessingNode","hideProcessingNode","hideCompletedNode","Graph","graphContainer","graphWindow","addNavButtonListeners","arrows","nodes","steps","currentStep","noSkip","generateTree","addElementsToHash","i","length","doSteps","doStep","traverse","cur","child","children","x","y","arrow","treeNode","getTreeNode","treeNodeKey","push","jumpToStep","step","hiddenSteps","undoStep","object","Promise","resolve","setTimeout","count","arrowId","nodeReturning","resizeViewBox","dimensions","width","height","ControllerContainer","mainContainer","NodePosition","input","mod","prevNode","level","PositionCalculator","data","maxX","maxY","rootNode","getPosition","getYCoor","firstTraverse","centerChildren","applyMod","shiftTrees","getTreeDimensions","getRoot","fixNodeConflicts","modSum","rightContour","curNode","max","leftContour","Infinity","min","leftestContour","shift","console","log","root","getElementById","controller","graph","user_input","fibfn","positionCalculator","treeData","animate"],"sourceRoot":""}